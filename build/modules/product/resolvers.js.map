{"version":3,"sources":["../../../src/modules/product/resolvers.js"],"names":["getAll","models","Product","findAll","order","getBySlug","parentValue","slug","findOne","where","product","Error","getById","productId","id","getRelated","Sequelize","Op","not","limit","fn","create","name","description","type","gender","image","auth","user","role","params","roles","admin","update","remove","destroy","getTypes","Object","values","types"],"mappings":"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","sourcesContent":["// App Imports\nimport params from '../../config/params'\nimport models from '../../setup/models'\n\n// Get all products\nexport async function getAll() {\n  return await models.Product.findAll({ order: [['id', 'DESC']] })\n}\n\n// Get product by slug\nexport async function getBySlug(parentValue, { slug }) {\n  const product = await models.Product.findOne({ where: { slug } })\n\n  if (!product) {\n    // Product does not exists\n    throw new Error('The product you are looking for does not exists or has been discontinued.')\n  } else {\n    return product\n  }\n}\n\n// Get product by ID\nexport async function getById(parentValue, { productId }) {\n  const product = await models.Product.findOne({ where: { id: productId } })\n\n  if (!product) {\n    // Product does not exists\n    throw new Error('The product you are looking for does not exists or has been discontinued.')\n  } else {\n    return product\n  }\n}\n\n// Get related products\nexport async function getRelated(parentValue, { productId }) {\n  return await models.Product.findAll({\n    where: {\n      id: { [models.Sequelize.Op.not]: productId }\n    },\n    limit: 3,\n    order: [[models.Sequelize.fn('RAND')]] // mock related products by showing random products\n  })\n}\n\n// Create product\nexport async function create(parentValue, { name, slug, description, type, gender, image }, { auth }) {\n  if(auth.user && auth.user.role === params.user.roles.admin) {\n    return await models.Product.create({\n      name,\n      slug,\n      description,\n      type,\n      gender,\n      image\n    })\n  } else {\n    throw new Error('Operation denied.')\n  }\n}\n\n// Update product\nexport async function update(parentValue, { id, name, slug, description, type, gender, image }, { auth }) {\n  if(auth.user && auth.user.role === params.user.roles.admin) {\n    return await models.Product.update(\n      {\n        name,\n        slug,\n        description,\n        type,\n        gender,\n        image\n      },\n      { where: { id } }\n    )\n  } else {\n    throw new Error('Operation denied.')\n  }\n}\n\n// Delete product\nexport async function remove(parentValue, { id }, { auth }) {\n  if(auth.user && auth.user.role === params.user.roles.admin) {\n    const product = await models.Product.findOne({where: {id}})\n\n    if (!product) {\n      // Product does not exists\n      throw new Error('The product does not exists.')\n    } else {\n      return await models.Product.destroy({where: {id}})\n    }\n  } else {\n    throw new Error('Operation denied.')\n  }\n}\n\n// Product types\nexport async function getTypes() {\n  return Object.values(params.product.types)\n}"],"file":"resolvers.js"}