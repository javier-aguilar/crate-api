{"version":3,"sources":["../../../src/modules/user/resolvers.js"],"names":["create","parentValue","name","email","password","models","User","findOne","where","user","bcrypt","hash","serverConfig","saltRounds","passwordHashed","Error","login","userDetails","get","compare","passwordMatch","userDetailsToken","id","role","token","jwt","sign","secret","getById","getAll","findAll","remove","destroy","getGenders","Object","values","params","gender"],"mappings":"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","sourcesContent":["// Imports\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\n\n// App Imports\nimport serverConfig from '../../config/server'\nimport params from '../../config/params'\nimport models from '../../setup/models'\n\n// Create\nexport async function create(parentValue, { name, email, password }) {\n  // Users exists with same email check\n  const user = await models.User.findOne({ where: { email } })\n\n  if (!user) {\n    // User does not exists\n    const passwordHashed = await bcrypt.hash(password, serverConfig.saltRounds)\n\n    return await models.User.create({\n      name,\n      email,\n      password: passwordHashed\n    })\n  } else {\n    // User exists\n    throw new Error(`The email ${ email } is already registered. Please try to login.`)\n  }\n}\n\nexport async function login(parentValue, { email, password }) {\n  const user = await models.User.findOne({ where: { email } })\n\n  if (!user) {\n    // User does not exists\n    throw new Error(`We do not have any user registered with ${ email } email address. Please signup.`)\n  } else {\n    const userDetails = user.get()\n\n    // User exists\n    const passwordMatch = await bcrypt.compare(password, userDetails.password)\n\n    if (!passwordMatch) {\n      // Incorrect password\n      throw new Error(`Sorry, the password you entered is incorrect. Please try again.`)\n    } else {\n      const userDetailsToken = {\n        id: userDetails.id,\n        name: userDetails.name,\n        email: userDetails.email,\n        role: userDetails.role\n      }\n\n      return {\n        user: userDetails,\n        token: jwt.sign(userDetailsToken, serverConfig.secret)\n      }\n    }\n  }\n}\n\n// Get by ID\nexport async function getById(parentValue, { id }) {\n  return await models.User.findOne({ where: { id } })\n}\n\n// Get all\nexport async function getAll() {\n  return await models.User.findAll()\n}\n\n// Delete\nexport async function remove(parentValue, { id }) {\n  return await models.User.destroy({ where: { id } })\n}\n\n// User genders\nexport async function getGenders() {\n  return Object.values(params.user.gender)\n}\n"],"file":"resolvers.js"}