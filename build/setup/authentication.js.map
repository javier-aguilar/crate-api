{"version":3,"sources":["../../src/setup/authentication.js"],"names":["request","response","next","authToken","headers","authorization","token","split","user","jwt","verify","serverConfig","secret","e","console","warn"],"mappings":";;;;;;;;;AACA;;AACA;;AAFA;AAIA;AACe,kBAAUA,OAAV,EAAmBC,QAAnB,EAA6BC,IAA7B,EAAmC;AAChD,MAAIC,SAAS,GAAGH,OAAO,CAACI,OAAR,CAAgBC,aAAhC;;AAEA,MAAIF,SAAS,IAAIA,SAAS,KAAK,IAA/B,EAAqC;AACnC,QAAI;AACF,UAAMG,KAAK,GAAGH,SAAS,CAACI,KAAV,CAAgB,GAAhB,CAAd;AACAP,MAAAA,OAAO,CAACQ,IAAR,GAAeC,yBAAIC,MAAJ,CAAWJ,KAAK,CAAC,CAAD,CAAhB,EAAqBK,mBAAaC,MAAlC,CAAf;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb;AACD;AACF,GAPD,MAOO;AACLf,IAAAA,OAAO,CAACQ,IAAR,GAAe,EAAf;AACD;;AAEDN,EAAAA,IAAI;AACL","sourcesContent":["// Imports\nimport jwt from 'jsonwebtoken'\nimport serverConfig from '../config/server.json'\n\n// Authentication middleware\nexport default function (request, response, next) {\n  let authToken = request.headers.authorization\n\n  if (authToken && authToken !== null) {\n    try {\n      const token = authToken.split(' ')\n      request.user = jwt.verify(token[1], serverConfig.secret)\n    } catch (e) {\n      console.warn('Invalid token detected.')\n    }\n  } else {\n    request.user = {}\n  }\n\n  next()\n}\n"],"file":"authentication.js"}